// Code generated by protoc-gen-gogo.
// source: command/commands.proto
// DO NOT EDIT!

/*
	Package command is a generated protocol buffer package.

	It is generated from these files:
		command/commands.proto

	It has these top-level messages:
		Command
		Open
		Begin
		WalFrames
		WalFramesPage
		Undo
		End
		Checkpoint
*/
package command

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Code identifying the type of the params field of a Command.
type Code int32

const (
	Code_OPEN       Code = 0
	Code_BEGIN      Code = 1
	Code_WAL_FRAMES Code = 2
	Code_UNDO       Code = 3
	Code_END        Code = 4
	Code_CHECKPOINT Code = 5
)

var Code_name = map[int32]string{
	0: "OPEN",
	1: "BEGIN",
	2: "WAL_FRAMES",
	3: "UNDO",
	4: "END",
	5: "CHECKPOINT",
}
var Code_value = map[string]int32{
	"OPEN":       0,
	"BEGIN":      1,
	"WAL_FRAMES": 2,
	"UNDO":       3,
	"END":        4,
	"CHECKPOINT": 5,
}

func (x Code) String() string {
	return proto.EnumName(Code_name, int32(x))
}
func (Code) EnumDescriptor() ([]byte, []int) { return fileDescriptorCommands, []int{0} }

// Command meant to be executed by the dqlite Raft FSM.
type Command struct {
	Code   Code   `protobuf:"varint,1,opt,name=code,proto3,enum=command.Code" json:"code,omitempty"`
	Params []byte `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *Command) Reset()                    { *m = Command{} }
func (m *Command) String() string            { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()               {}
func (*Command) Descriptor() ([]byte, []int) { return fileDescriptorCommands, []int{0} }

func (m *Command) GetCode() Code {
	if m != nil {
		return m.Code
	}
	return Code_OPEN
}

func (m *Command) GetParams() []byte {
	if m != nil {
		return m.Params
	}
	return nil
}

// Parameters to open a new database and setup the needed data
// structures for replication.
type Open struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *Open) Reset()                    { *m = Open{} }
func (m *Open) String() string            { return proto.CompactTextString(m) }
func (*Open) ProtoMessage()               {}
func (*Open) Descriptor() ([]byte, []int) { return fileDescriptorCommands, []int{1} }

func (m *Open) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Parameters to begin a new write transaction.
type Begin struct {
	Txid string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *Begin) Reset()                    { *m = Begin{} }
func (m *Begin) String() string            { return proto.CompactTextString(m) }
func (*Begin) ProtoMessage()               {}
func (*Begin) Descriptor() ([]byte, []int) { return fileDescriptorCommands, []int{2} }

func (m *Begin) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *Begin) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Parameters to append new frames to the WAL within a write transaction.
type WalFrames struct {
	Txid      string           `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	PageSize  int32            `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Pages     []*WalFramesPage `protobuf:"bytes,3,rep,name=pages" json:"pages,omitempty"`
	Truncate  uint32           `protobuf:"varint,4,opt,name=truncate,proto3" json:"truncate,omitempty"`
	IsCommit  int32            `protobuf:"varint,5,opt,name=is_commit,json=isCommit,proto3" json:"is_commit,omitempty"`
	SyncFlags uint32           `protobuf:"varint,6,opt,name=sync_flags,json=syncFlags,proto3" json:"sync_flags,omitempty"`
}

func (m *WalFrames) Reset()                    { *m = WalFrames{} }
func (m *WalFrames) String() string            { return proto.CompactTextString(m) }
func (*WalFrames) ProtoMessage()               {}
func (*WalFrames) Descriptor() ([]byte, []int) { return fileDescriptorCommands, []int{3} }

func (m *WalFrames) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *WalFrames) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *WalFrames) GetPages() []*WalFramesPage {
	if m != nil {
		return m.Pages
	}
	return nil
}

func (m *WalFrames) GetTruncate() uint32 {
	if m != nil {
		return m.Truncate
	}
	return 0
}

func (m *WalFrames) GetIsCommit() int32 {
	if m != nil {
		return m.IsCommit
	}
	return 0
}

func (m *WalFrames) GetSyncFlags() uint32 {
	if m != nil {
		return m.SyncFlags
	}
	return 0
}

// A single frame of data in a WalFrames command.
type WalFramesPage struct {
	Data   []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Flags  uint32 `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	Number uint32 `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
}

func (m *WalFramesPage) Reset()                    { *m = WalFramesPage{} }
func (m *WalFramesPage) String() string            { return proto.CompactTextString(m) }
func (*WalFramesPage) ProtoMessage()               {}
func (*WalFramesPage) Descriptor() ([]byte, []int) { return fileDescriptorCommands, []int{4} }

func (m *WalFramesPage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *WalFramesPage) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *WalFramesPage) GetNumber() uint32 {
	if m != nil {
		return m.Number
	}
	return 0
}

// Parameters to undo any previous WAL change in a write transaction.
type Undo struct {
	Txid string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (m *Undo) Reset()                    { *m = Undo{} }
func (m *Undo) String() string            { return proto.CompactTextString(m) }
func (*Undo) ProtoMessage()               {}
func (*Undo) Descriptor() ([]byte, []int) { return fileDescriptorCommands, []int{5} }

func (m *Undo) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

// Parameters to end a write transaction, and update the WAL commit
// pointer.
type End struct {
	Txid string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (m *End) Reset()                    { *m = End{} }
func (m *End) String() string            { return proto.CompactTextString(m) }
func (*End) ProtoMessage()               {}
func (*End) Descriptor() ([]byte, []int) { return fileDescriptorCommands, []int{6} }

func (m *End) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

// Parameters to perform a WAL checkpoint.
type Checkpoint struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *Checkpoint) Reset()                    { *m = Checkpoint{} }
func (m *Checkpoint) String() string            { return proto.CompactTextString(m) }
func (*Checkpoint) ProtoMessage()               {}
func (*Checkpoint) Descriptor() ([]byte, []int) { return fileDescriptorCommands, []int{7} }

func (m *Checkpoint) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Command)(nil), "command.Command")
	proto.RegisterType((*Open)(nil), "command.Open")
	proto.RegisterType((*Begin)(nil), "command.Begin")
	proto.RegisterType((*WalFrames)(nil), "command.WalFrames")
	proto.RegisterType((*WalFramesPage)(nil), "command.WalFramesPage")
	proto.RegisterType((*Undo)(nil), "command.Undo")
	proto.RegisterType((*End)(nil), "command.End")
	proto.RegisterType((*Checkpoint)(nil), "command.Checkpoint")
	proto.RegisterEnum("command.Code", Code_name, Code_value)
}
func (m *Command) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Command) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommands(dAtA, i, uint64(m.Code))
	}
	if len(m.Params) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Params)))
		i += copy(dAtA[i:], m.Params)
	}
	return i, nil
}

func (m *Open) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Open) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *Begin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Begin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Txid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Txid)))
		i += copy(dAtA[i:], m.Txid)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *WalFrames) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WalFrames) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Txid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Txid)))
		i += copy(dAtA[i:], m.Txid)
	}
	if m.PageSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommands(dAtA, i, uint64(m.PageSize))
	}
	if len(m.Pages) > 0 {
		for _, msg := range m.Pages {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintCommands(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Truncate != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCommands(dAtA, i, uint64(m.Truncate))
	}
	if m.IsCommit != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCommands(dAtA, i, uint64(m.IsCommit))
	}
	if m.SyncFlags != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCommands(dAtA, i, uint64(m.SyncFlags))
	}
	return i, nil
}

func (m *WalFramesPage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WalFramesPage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.Flags != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommands(dAtA, i, uint64(m.Flags))
	}
	if m.Number != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommands(dAtA, i, uint64(m.Number))
	}
	return i, nil
}

func (m *Undo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Undo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Txid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Txid)))
		i += copy(dAtA[i:], m.Txid)
	}
	return i, nil
}

func (m *End) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *End) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Txid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Txid)))
		i += copy(dAtA[i:], m.Txid)
	}
	return i, nil
}

func (m *Checkpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Checkpoint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func encodeFixed64Commands(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Commands(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCommands(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Command) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommands(uint64(m.Code))
	}
	l = len(m.Params)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Open) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Begin) Size() (n int) {
	var l int
	_ = l
	l = len(m.Txid)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *WalFrames) Size() (n int) {
	var l int
	_ = l
	l = len(m.Txid)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	if m.PageSize != 0 {
		n += 1 + sovCommands(uint64(m.PageSize))
	}
	if len(m.Pages) > 0 {
		for _, e := range m.Pages {
			l = e.Size()
			n += 1 + l + sovCommands(uint64(l))
		}
	}
	if m.Truncate != 0 {
		n += 1 + sovCommands(uint64(m.Truncate))
	}
	if m.IsCommit != 0 {
		n += 1 + sovCommands(uint64(m.IsCommit))
	}
	if m.SyncFlags != 0 {
		n += 1 + sovCommands(uint64(m.SyncFlags))
	}
	return n
}

func (m *WalFramesPage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	if m.Flags != 0 {
		n += 1 + sovCommands(uint64(m.Flags))
	}
	if m.Number != 0 {
		n += 1 + sovCommands(uint64(m.Number))
	}
	return n
}

func (m *Undo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Txid)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *End) Size() (n int) {
	var l int
	_ = l
	l = len(m.Txid)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Checkpoint) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func sovCommands(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCommands(x uint64) (n int) {
	return sovCommands(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Command) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Command: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Command: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (Code(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Params = append(m.Params[:0], dAtA[iNdEx:postIndex]...)
			if m.Params == nil {
				m.Params = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Open) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Open: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Open: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Begin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Begin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Begin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WalFrames) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WalFrames: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WalFrames: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pages = append(m.Pages, &WalFramesPage{})
			if err := m.Pages[len(m.Pages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Truncate", wireType)
			}
			m.Truncate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Truncate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCommit", wireType)
			}
			m.IsCommit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsCommit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncFlags", wireType)
			}
			m.SyncFlags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SyncFlags |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WalFramesPage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WalFramesPage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WalFramesPage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Undo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Undo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Undo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *End) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: End: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: End: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Checkpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Checkpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Checkpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommands(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCommands
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCommands
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCommands(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCommands = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommands   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("command/commands.proto", fileDescriptorCommands) }

var fileDescriptorCommands = []byte{
	// 422 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x92, 0x51, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xbb, 0xb1, 0x9d, 0xc4, 0x43, 0x53, 0x59, 0x2b, 0x14, 0x99, 0x22, 0x22, 0xe3, 0xa7,
	0x08, 0xa1, 0x54, 0x2a, 0x27, 0x68, 0x1c, 0x07, 0x2a, 0xc0, 0x0e, 0x5b, 0xaa, 0x3e, 0x5a, 0x5b,
	0x7b, 0x31, 0x2b, 0xea, 0xb5, 0xe5, 0x75, 0x25, 0xc8, 0x49, 0x38, 0x0f, 0x4f, 0x3c, 0x72, 0x04,
	0x14, 0x2e, 0x82, 0x76, 0x6d, 0x2c, 0x2a, 0xf9, 0xc9, 0xff, 0x3f, 0x33, 0xdf, 0x8e, 0x66, 0xc6,
	0x30, 0x4f, 0xcb, 0xa2, 0xa0, 0x22, 0x3b, 0xeb, 0xbe, 0x72, 0x55, 0xd5, 0x65, 0x53, 0xe2, 0x49,
	0xe7, 0xfd, 0x0d, 0x4c, 0x82, 0x56, 0xe2, 0xe7, 0x60, 0xa6, 0x65, 0xc6, 0x5c, 0xe4, 0xa1, 0xe5,
	0xc9, 0xf9, 0x6c, 0xd5, 0x95, 0xac, 0x82, 0x32, 0x63, 0x44, 0xa7, 0xf0, 0x1c, 0xc6, 0x15, 0xad,
	0x69, 0x21, 0xdd, 0x91, 0x87, 0x96, 0xc7, 0xa4, 0x73, 0xfe, 0x29, 0x98, 0x71, 0xc5, 0x04, 0xc6,
	0x60, 0x0a, 0x5a, 0xb4, 0x4f, 0xd8, 0x44, 0x6b, 0xff, 0x0c, 0xac, 0x35, 0xcb, 0xb9, 0x4e, 0x36,
	0x5f, 0x79, 0xf6, 0x2f, 0xa9, 0x74, 0x0f, 0x8c, 0xfe, 0x03, 0x7e, 0x20, 0xb0, 0x6f, 0xe8, 0xdd,
	0xb6, 0xa6, 0x05, 0x93, 0x83, 0xd4, 0x53, 0xb0, 0x2b, 0x9a, 0xb3, 0x44, 0xf2, 0x7d, 0x8b, 0x5a,
	0x64, 0xaa, 0x02, 0x57, 0x7c, 0xcf, 0xf0, 0x4b, 0xb0, 0x94, 0x96, 0xae, 0xe1, 0x19, 0xcb, 0x47,
	0xe7, 0xf3, 0x7e, 0x8e, 0xfe, 0xcd, 0x1d, 0xcd, 0x19, 0x69, 0x8b, 0xf0, 0x29, 0x4c, 0x9b, 0xfa,
	0x5e, 0xa4, 0xb4, 0x61, 0xae, 0xe9, 0xa1, 0xe5, 0x8c, 0xf4, 0x5e, 0xb5, 0xe1, 0x32, 0x51, 0x38,
	0x6f, 0x5c, 0xab, 0x6d, 0xc3, 0x65, 0xa0, 0x3d, 0x7e, 0x06, 0x20, 0xbf, 0x89, 0x34, 0xf9, 0x74,
	0x47, 0x73, 0xe9, 0x8e, 0x35, 0x6a, 0xab, 0xc8, 0x56, 0x05, 0xfc, 0x0f, 0x30, 0x7b, 0xd0, 0x4f,
	0xcd, 0x91, 0xd1, 0x86, 0xea, 0x39, 0x8e, 0x89, 0xd6, 0xf8, 0x31, 0x58, 0x2d, 0x3e, 0xd2, 0x78,
	0x6b, 0xd4, 0x92, 0xc5, 0x7d, 0x71, 0xcb, 0x6a, 0xd7, 0xd0, 0xe1, 0xce, 0xa9, 0x25, 0x5f, 0x8b,
	0xac, 0x1c, 0xda, 0x88, 0xff, 0x04, 0x8c, 0x50, 0x64, 0x83, 0x29, 0x0f, 0x20, 0xf8, 0xcc, 0xd2,
	0x2f, 0x55, 0xc9, 0x45, 0x33, 0x74, 0xa1, 0x17, 0x11, 0x98, 0xea, 0xc6, 0x78, 0x0a, 0x66, 0xbc,
	0x0b, 0x23, 0xe7, 0x08, 0xdb, 0x60, 0xad, 0xc3, 0xd7, 0x97, 0x91, 0x83, 0xf0, 0x09, 0xc0, 0xcd,
	0xc5, 0xbb, 0x64, 0x4b, 0x2e, 0xde, 0x87, 0x57, 0xce, 0x48, 0x15, 0x5d, 0x47, 0x9b, 0xd8, 0x31,
	0xf0, 0x04, 0x8c, 0x30, 0xda, 0x38, 0xa6, 0x2a, 0x09, 0xde, 0x84, 0xc1, 0xdb, 0x5d, 0x7c, 0x19,
	0x7d, 0x74, 0xac, 0xb5, 0xf3, 0xf3, 0xb0, 0x40, 0xbf, 0x0e, 0x0b, 0xf4, 0xfb, 0xb0, 0x40, 0xdf,
	0xff, 0x2c, 0x8e, 0x6e, 0xc7, 0xfa, 0xaf, 0x7b, 0xf5, 0x37, 0x00, 0x00, 0xff, 0xff, 0xde, 0x9d,
	0x73, 0x68, 0x8f, 0x02, 0x00, 0x00,
}
